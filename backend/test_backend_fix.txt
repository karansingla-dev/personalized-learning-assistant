
# In test_backend.py, update the test to get subjects dynamically:

async def test_topics(subject_id: str = None):
    """Test fetching topics for a subject"""
    # Get the actual subject ID from the database
    if not subject_id:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BASE_URL}/api/v1/subjects") as response:
                if response.status == 200:
                    subjects = await response.json()
                    if subjects:
                        subject_id = subjects[0]["_id"]  # Use first subject's actual ID
    
    print(f"\nüìç Testing topics for subject {subject_id}...")
    
    async with aiohttp.ClientSession() as session:
        async with session.get(
            f"{BASE_URL}/api/v1/subjects/{subject_id}/topics?class_level=10"
        ) as response:
            if response.status == 200:
                topics = await response.json()
                print(f"‚úÖ Found {len(topics)} topics")
                if topics:
                    print(f"   Sample topic: {topics[0].get('name', 'Unknown')}")
                return topics
            else:
                print(f"‚ùå Failed to fetch topics: {response.status}")
                return []
